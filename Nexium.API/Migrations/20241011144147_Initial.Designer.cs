// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nexium.API.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Nexium.API.Migrations
{
    [DbContext(typeof(NexiumDbContext))]
    [Migration("20241011144147_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BusinessIndustry", b =>
                {
                    b.Property<long>("BusinessesId")
                        .HasColumnType("bigint")
                        .HasColumnName("businesses_id");

                    b.Property<short>("IndustriesId")
                        .HasColumnType("smallint")
                        .HasColumnName("industries_id");

                    b.HasKey("BusinessesId", "IndustriesId")
                        .HasName("pk_business_industry");

                    b.HasIndex("IndustriesId")
                        .HasDatabaseName("ix_business_industry_industries_id");

                    b.ToTable("business_industry", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.AddressType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_address_types");

                    b.ToTable("address_types", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.AddressTypeTranslation", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<byte>("AddressTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("address_type_id");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("language_code");

                    b.Property<string>("TranslatedLabel")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("translated_label");

                    b.HasKey("Id")
                        .HasName("pk_address_types_translations");

                    b.HasIndex("AddressTypeId", "LanguageCode")
                        .IsUnique()
                        .HasDatabaseName("ix_address_types_translations_address_type_id_language_code");

                    b.ToTable("address_types_translations", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.Business", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("alias");

                    b.Property<byte>("BusinessStatusId")
                        .HasColumnType("smallint")
                        .HasColumnName("business_status_id");

                    b.Property<byte>("BusinessTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("business_type_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<byte?>("CurrencyId")
                        .HasColumnType("smallint")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("EmployeesCount")
                        .HasColumnType("integer")
                        .HasColumnName("employees_count");

                    b.Property<string>("EndOperatingHour")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("end_operating_hour");

                    b.Property<string>("EstablishmentYear")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("establishment_year");

                    b.Property<int>("FiscalYearStartPeriod")
                        .HasColumnType("integer")
                        .HasColumnName("fiscal_year_start_period");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("language_code");

                    b.Property<byte>("LanguageId")
                        .HasColumnType("smallint")
                        .HasColumnName("language_id");

                    b.Property<string>("LogoPath")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("logo_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("StartOperatingHour")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("start_operating_hour");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_business");

                    b.HasIndex("BusinessStatusId")
                        .HasDatabaseName("ix_business_business_status_id");

                    b.HasIndex("BusinessTypeId")
                        .HasDatabaseName("ix_business_business_type_id");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("ix_business_currency_id");

                    b.HasIndex("LanguageCode")
                        .HasDatabaseName("ix_business_language_code");

                    b.ToTable("business", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<byte>("AddressTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("address_type_id");

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint")
                        .HasColumnName("business_id");

                    b.Property<byte>("CityId")
                        .HasColumnType("smallint")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<string>("Latitude")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("latitude");

                    b.Property<string>("Longitude")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("longitude");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("zip_code");

                    b.HasKey("Id")
                        .HasName("pk_business_address");

                    b.HasIndex("AddressTypeId")
                        .HasDatabaseName("ix_business_address_address_type_id");

                    b.HasIndex("BusinessId")
                        .HasDatabaseName("ix_business_address_business_id");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_business_address_city_id");

                    b.ToTable("business_address", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint")
                        .HasColumnName("business_id");

                    b.Property<byte>("ContactTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("contact_type_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("email");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone");

                    b.Property<string>("ResponsibleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("responsible_name");

                    b.Property<string>("ResponsiblePosition")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("responsible_position");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_business_contact");

                    b.HasIndex("BusinessId")
                        .HasDatabaseName("ix_business_contact_business_id");

                    b.HasIndex("ContactTypeId")
                        .HasDatabaseName("ix_business_contact_contact_type_id");

                    b.ToTable("business_contact", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessIdentifier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint")
                        .HasColumnName("business_id");

                    b.Property<byte>("IdentifierTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("identifier_type_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_business_identifier");

                    b.HasIndex("BusinessId")
                        .HasDatabaseName("ix_business_identifier_business_id");

                    b.HasIndex("IdentifierTypeId")
                        .HasDatabaseName("ix_business_identifier_identifier_type_id");

                    b.ToTable("business_identifier", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessRelationship", b =>
                {
                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint")
                        .HasColumnName("business_id");

                    b.Property<long>("RelatedBusinessId")
                        .HasColumnType("bigint")
                        .HasColumnName("related_business_id");

                    b.Property<bool>("IsRetailer")
                        .HasColumnType("boolean")
                        .HasColumnName("is_retailer");

                    b.HasKey("BusinessId", "RelatedBusinessId")
                        .HasName("pk_business_relationship");

                    b.HasIndex("RelatedBusinessId")
                        .HasDatabaseName("ix_business_relationship_related_business_id");

                    b.ToTable("business_relationship", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessStatus", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_business_statuses");

                    b.ToTable("business_statuses", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessStatusTranslation", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<byte>("BusinessStatusId")
                        .HasColumnType("smallint")
                        .HasColumnName("business_status_id");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("language_code");

                    b.Property<string>("TranslatedLabel")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("translated_label");

                    b.HasKey("Id")
                        .HasName("pk_business_statuses_translations");

                    b.HasIndex("BusinessStatusId", "LanguageCode")
                        .IsUnique()
                        .HasDatabaseName("ix_business_statuses_translations_business_status_id_language_");

                    b.ToTable("business_statuses_translations", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_business_types");

                    b.ToTable("business_types", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessTypeTranslation", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<byte>("BusinessTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("business_type_id");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("language_code");

                    b.Property<string>("TranslatedLabel")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("translated_label");

                    b.HasKey("Id")
                        .HasName("pk_business_types_translations");

                    b.HasIndex("BusinessTypeId", "LanguageCode")
                        .IsUnique()
                        .HasDatabaseName("ix_business_types_translations_business_type_id_language_code");

                    b.ToTable("business_types_translations", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.City", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<byte>("CountryId")
                        .HasColumnType("smallint")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_city");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_city_country_id");

                    b.ToTable("city", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.ContactType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_contact_types");

                    b.ToTable("contact_types", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.ContactTypeTranslation", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<byte>("ContactTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("contact_type_id");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("language_code");

                    b.Property<string>("TranslatedLabel")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("translated_label");

                    b.HasKey("Id")
                        .HasName("pk_contact_types_translations");

                    b.HasIndex("ContactTypeId", "LanguageCode")
                        .IsUnique()
                        .HasDatabaseName("ix_contact_types_translations_contact_type_id_language_code");

                    b.ToTable("contact_types_translations", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.Country", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_country");

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.Currency", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_currencies");

                    b.ToTable("currencies", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.CurrencyTranslation", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<byte>("CurrencyId")
                        .HasColumnType("smallint")
                        .HasColumnName("currency_id");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("language_code");

                    b.Property<string>("TranslatedLabel")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("translated_label");

                    b.HasKey("Id")
                        .HasName("pk_currencies_translations");

                    b.HasIndex("CurrencyId", "LanguageCode")
                        .IsUnique()
                        .HasDatabaseName("ix_currencies_translations_currency_id_language_code");

                    b.ToTable("currencies_translations", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.IdentifierType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_identifier_types");

                    b.ToTable("identifier_types", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.IdentifierTypeTranslation", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<byte>("IdentifierTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("identifier_type_id");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("language_code");

                    b.Property<string>("TranslatedLabel")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("translated_label");

                    b.HasKey("Id")
                        .HasName("pk_identifier_types_translations");

                    b.HasIndex("IdentifierTypeId", "LanguageCode")
                        .IsUnique()
                        .HasDatabaseName("ix_identifier_types_translations_identifier_type_id_language_c");

                    b.ToTable("identifier_types_translations", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.Industry", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_industries");

                    b.ToTable("industries", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.IndustryTranslation", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<short>("IndustryId")
                        .HasColumnType("smallint")
                        .HasColumnName("industry_id");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("language_code");

                    b.Property<string>("TranslatedLabel")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("translated_label");

                    b.HasKey("Id")
                        .HasName("pk_industry_translations");

                    b.HasIndex("IndustryId", "LanguageCode")
                        .IsUnique()
                        .HasDatabaseName("ix_industry_translations_industry_id_language_code");

                    b.ToTable("industry_translations", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.Language", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("name");

                    b.HasKey("Code")
                        .HasName("pk_languages");

                    b.ToTable("languages", (string)null);

                    b.HasData(
                        new
                        {
                            Code = "ar",
                            Name = "العربية"
                        },
                        new
                        {
                            Code = "fr",
                            Name = "Français"
                        },
                        new
                        {
                            Code = "en",
                            Name = "English"
                        });
                });

            modelBuilder.Entity("Nexium.API.Entities.TargetMarket", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<long?>("BusinessId")
                        .HasColumnType("bigint")
                        .HasColumnName("business_id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_target_markets");

                    b.HasIndex("BusinessId")
                        .HasDatabaseName("ix_target_markets_business_id");

                    b.ToTable("target_markets", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.TargetMarketTranslation", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("language_code");

                    b.Property<byte>("TargetMarketId")
                        .HasColumnType("smallint")
                        .HasColumnName("target_market_id");

                    b.Property<string>("TranslatedLabel")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("translated_label");

                    b.HasKey("Id")
                        .HasName("pk_target_markets_translations");

                    b.HasIndex("TargetMarketId", "LanguageCode")
                        .IsUnique()
                        .HasDatabaseName("ix_target_markets_translations_target_market_id_language_code");

                    b.ToTable("target_markets_translations", (string)null);
                });

            modelBuilder.Entity("BusinessIndustry", b =>
                {
                    b.HasOne("Nexium.API.Entities.Business", null)
                        .WithMany()
                        .HasForeignKey("BusinessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_industry_business_businesses_id");

                    b.HasOne("Nexium.API.Entities.Industry", null)
                        .WithMany()
                        .HasForeignKey("IndustriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_industry_industries_industries_id");
                });

            modelBuilder.Entity("Nexium.API.Entities.AddressTypeTranslation", b =>
                {
                    b.HasOne("Nexium.API.Entities.AddressType", "AddressType")
                        .WithMany("Translations")
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_address_types_translations_address_types_address_type_id");

                    b.Navigation("AddressType");
                });

            modelBuilder.Entity("Nexium.API.Entities.Business", b =>
                {
                    b.HasOne("Nexium.API.Entities.BusinessStatus", "BusinessStatus")
                        .WithMany()
                        .HasForeignKey("BusinessStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_business_statuses_business_status_id");

                    b.HasOne("Nexium.API.Entities.BusinessType", "BusinessType")
                        .WithMany()
                        .HasForeignKey("BusinessTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_business_types_business_type_id");

                    b.HasOne("Nexium.API.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk_business_currencies_currency_id");

                    b.HasOne("Nexium.API.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageCode")
                        .HasConstraintName("fk_business_languages_language_code");

                    b.Navigation("BusinessStatus");

                    b.Navigation("BusinessType");

                    b.Navigation("Currency");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessAddress", b =>
                {
                    b.HasOne("Nexium.API.Entities.AddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_address_address_types_address_type_id");

                    b.HasOne("Nexium.API.Entities.Business", "Business")
                        .WithMany("BusinessAddresses")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_address_business_business_id");

                    b.HasOne("Nexium.API.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_address_city_city_id");

                    b.Navigation("AddressType");

                    b.Navigation("Business");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessContact", b =>
                {
                    b.HasOne("Nexium.API.Entities.Business", "Business")
                        .WithMany("BusinessContacts")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_contact_business_business_id");

                    b.HasOne("Nexium.API.Entities.ContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_contact_contact_types_contact_type_id");

                    b.Navigation("Business");

                    b.Navigation("ContactType");
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessIdentifier", b =>
                {
                    b.HasOne("Nexium.API.Entities.Business", "Business")
                        .WithMany("BusinessIdentifiers")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_identifier_business_business_id");

                    b.HasOne("Nexium.API.Entities.IdentifierType", "IdentifierType")
                        .WithMany()
                        .HasForeignKey("IdentifierTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_identifier_identifier_types_identifier_type_id");

                    b.Navigation("Business");

                    b.Navigation("IdentifierType");
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessRelationship", b =>
                {
                    b.HasOne("Nexium.API.Entities.Business", "Business")
                        .WithMany("Suppliers")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_relationship_business_business_id");

                    b.HasOne("Nexium.API.Entities.Business", "RelatedBusiness")
                        .WithMany("Retailers")
                        .HasForeignKey("RelatedBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_relationship_business_related_business_id");

                    b.Navigation("Business");

                    b.Navigation("RelatedBusiness");
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessStatusTranslation", b =>
                {
                    b.HasOne("Nexium.API.Entities.BusinessStatus", "BusinessType")
                        .WithMany("Translations")
                        .HasForeignKey("BusinessStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_statuses_translations_business_statuses_business_s");

                    b.Navigation("BusinessType");
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessTypeTranslation", b =>
                {
                    b.HasOne("Nexium.API.Entities.BusinessType", "BusinessType")
                        .WithMany("Translations")
                        .HasForeignKey("BusinessTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_types_translations_business_types_business_type_id");

                    b.Navigation("BusinessType");
                });

            modelBuilder.Entity("Nexium.API.Entities.City", b =>
                {
                    b.HasOne("Nexium.API.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_city_country_country_id");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Nexium.API.Entities.ContactTypeTranslation", b =>
                {
                    b.HasOne("Nexium.API.Entities.ContactType", "ContactType")
                        .WithMany("Translations")
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contact_types_translations_contact_types_contact_type_id");

                    b.Navigation("ContactType");
                });

            modelBuilder.Entity("Nexium.API.Entities.CurrencyTranslation", b =>
                {
                    b.HasOne("Nexium.API.Entities.Currency", "Currency")
                        .WithMany("Translations")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_currencies_translations_currencies_currency_id");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Nexium.API.Entities.IdentifierTypeTranslation", b =>
                {
                    b.HasOne("Nexium.API.Entities.IdentifierType", "AddressType")
                        .WithMany("Translations")
                        .HasForeignKey("IdentifierTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_identifier_types_translations_identifier_types_identifier_t");

                    b.Navigation("AddressType");
                });

            modelBuilder.Entity("Nexium.API.Entities.IndustryTranslation", b =>
                {
                    b.HasOne("Nexium.API.Entities.Industry", "Industry")
                        .WithMany("Translations")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_industry_translations_industries_industry_id");

                    b.Navigation("Industry");
                });

            modelBuilder.Entity("Nexium.API.Entities.TargetMarket", b =>
                {
                    b.HasOne("Nexium.API.Entities.Business", null)
                        .WithMany("TargetMarkets")
                        .HasForeignKey("BusinessId")
                        .HasConstraintName("fk_target_markets_business_business_id");
                });

            modelBuilder.Entity("Nexium.API.Entities.TargetMarketTranslation", b =>
                {
                    b.HasOne("Nexium.API.Entities.TargetMarket", "TargetMarket")
                        .WithMany("Translations")
                        .HasForeignKey("TargetMarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_target_markets_translations_target_markets_target_market_id");

                    b.Navigation("TargetMarket");
                });

            modelBuilder.Entity("Nexium.API.Entities.AddressType", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Nexium.API.Entities.Business", b =>
                {
                    b.Navigation("BusinessAddresses");

                    b.Navigation("BusinessContacts");

                    b.Navigation("BusinessIdentifiers");

                    b.Navigation("Retailers");

                    b.Navigation("Suppliers");

                    b.Navigation("TargetMarkets");
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessStatus", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessType", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Nexium.API.Entities.ContactType", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Nexium.API.Entities.Currency", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Nexium.API.Entities.IdentifierType", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Nexium.API.Entities.Industry", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Nexium.API.Entities.TargetMarket", b =>
                {
                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
