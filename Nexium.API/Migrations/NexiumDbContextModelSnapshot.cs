// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nexium.API.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Nexium.API.Migrations
{
    [DbContext(typeof(NexiumDbContext))]
    partial class NexiumDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BusinessIndustry", b =>
                {
                    b.Property<long>("BusinessesId")
                        .HasColumnType("bigint")
                        .HasColumnName("businesses_id");

                    b.Property<short>("IndustriesId")
                        .HasColumnType("smallint")
                        .HasColumnName("industries_id");

                    b.HasKey("BusinessesId", "IndustriesId")
                        .HasName("pk_business_industry");

                    b.HasIndex("IndustriesId")
                        .HasDatabaseName("ix_business_industry_industries_id");

                    b.ToTable("business_industry", (string)null);
                });

            modelBuilder.Entity("BusinessRoleUserAccount", b =>
                {
                    b.Property<long>("BusinessRolesId")
                        .HasColumnType("bigint")
                        .HasColumnName("business_roles_id");

                    b.Property<long>("UserAccountsId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_accounts_id");

                    b.HasKey("BusinessRolesId", "UserAccountsId")
                        .HasName("pk_business_role_user_account");

                    b.HasIndex("UserAccountsId")
                        .HasDatabaseName("ix_business_role_user_account_user_accounts_id");

                    b.ToTable("business_role_user_account", (string)null);
                });

            modelBuilder.Entity("BusinessTargetMarket", b =>
                {
                    b.Property<long>("BusinessesId")
                        .HasColumnType("bigint")
                        .HasColumnName("businesses_id");

                    b.Property<byte>("TargetMarketsId")
                        .HasColumnType("smallint")
                        .HasColumnName("target_markets_id");

                    b.HasKey("BusinessesId", "TargetMarketsId")
                        .HasName("pk_business_target_market");

                    b.HasIndex("TargetMarketsId")
                        .HasDatabaseName("ix_business_target_market_target_markets_id");

                    b.ToTable("business_target_market", (string)null);
                });

            modelBuilder.Entity("EmployeeEmployeePosition", b =>
                {
                    b.Property<long>("EmployeesId")
                        .HasColumnType("bigint")
                        .HasColumnName("employees_id");

                    b.Property<int>("PositionsId")
                        .HasColumnType("integer")
                        .HasColumnName("positions_id");

                    b.HasKey("EmployeesId", "PositionsId")
                        .HasName("pk_employee_employee_position");

                    b.HasIndex("PositionsId")
                        .HasDatabaseName("ix_employee_employee_position_positions_id");

                    b.ToTable("employee_employee_position", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.AddressType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_address_types");

                    b.ToTable("address_types", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.AppSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("label");

                    b.Property<int?>("ParentAppSectionId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_app_section_id");

                    b.HasKey("Id")
                        .HasName("pk_app_sections");

                    b.HasIndex("ParentAppSectionId")
                        .HasDatabaseName("ix_app_sections_parent_app_section_id");

                    b.ToTable("app_sections", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.Business", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AboutDescriptionMarkup")
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)")
                        .HasColumnName("about_description_markup");

                    b.Property<byte>("AchievedStepIndex")
                        .HasColumnType("smallint")
                        .HasColumnName("achieved_step_index");

                    b.Property<byte?>("AddressTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("address_type_id");

                    b.Property<string>("Alias")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("alias");

                    b.Property<byte>("BusinessTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("business_type_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<byte?>("CurrencyId")
                        .HasColumnType("smallint")
                        .HasColumnName("currency_id");

                    b.Property<byte>("CurrentStatusId")
                        .HasColumnType("smallint")
                        .HasColumnName("current_status_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("email");

                    b.Property<int>("EmployeesCount")
                        .HasColumnType("integer")
                        .HasColumnName("employees_count");

                    b.Property<string>("EndOperatingHour")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("end_operating_hour");

                    b.Property<string>("EstablishmentYear")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("establishment_year");

                    b.Property<int>("FiscalYearStartMonth")
                        .HasColumnType("integer")
                        .HasColumnName("fiscal_year_start_month");

                    b.Property<bool>("IsRegistered")
                        .HasColumnType("boolean")
                        .HasColumnName("is_registered");

                    b.Property<bool>("IsRegistrationCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_registration_completed");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("language_code");

                    b.Property<byte>("LanguageId")
                        .HasColumnType("smallint")
                        .HasColumnName("language_id");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(220)
                        .HasColumnType("character varying(220)")
                        .HasColumnName("logo_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("phone_number");

                    b.Property<string>("StartOperatingHour")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("start_operating_hour");

                    b.Property<DateTime>("TermsAcceptedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("terms_accepted_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_businesses");

                    b.HasIndex("AddressTypeId")
                        .HasDatabaseName("ix_businesses_address_type_id");

                    b.HasIndex("BusinessTypeId")
                        .HasDatabaseName("ix_businesses_business_type_id");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("ix_businesses_currency_id");

                    b.HasIndex("CurrentStatusId")
                        .HasDatabaseName("ix_businesses_current_status_id");

                    b.HasIndex("LanguageCode")
                        .HasDatabaseName("ix_businesses_language_code");

                    b.ToTable("businesses", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<byte>("AddressTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("address_type_id");

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint")
                        .HasColumnName("business_id");

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<string>("Latitude")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("latitude");

                    b.Property<string>("Longitude")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("longitude");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("zip_code");

                    b.HasKey("Id")
                        .HasName("pk_business_addresses");

                    b.HasIndex("AddressTypeId")
                        .HasDatabaseName("ix_business_addresses_address_type_id");

                    b.HasIndex("BusinessId")
                        .HasDatabaseName("ix_business_addresses_business_id");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_business_addresses_city_id");

                    b.ToTable("business_addresses", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint")
                        .HasColumnName("business_id");

                    b.Property<byte>("ContactTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("contact_type_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("email");

                    b.Property<int>("EmployeePositionId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_position_id");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone");

                    b.Property<string>("ResponsibleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("responsible_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_business_contacts");

                    b.HasIndex("BusinessId")
                        .HasDatabaseName("ix_business_contacts_business_id");

                    b.HasIndex("ContactTypeId")
                        .HasDatabaseName("ix_business_contacts_contact_type_id");

                    b.HasIndex("EmployeePositionId")
                        .HasDatabaseName("ix_business_contacts_employee_position_id");

                    b.ToTable("business_contacts", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessIdentifier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint")
                        .HasColumnName("business_id");

                    b.Property<byte>("IdentifierTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("identifier_type_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_business_identifiers");

                    b.HasIndex("BusinessId")
                        .HasDatabaseName("ix_business_identifiers_business_id");

                    b.HasIndex("IdentifierTypeId")
                        .HasDatabaseName("ix_business_identifiers_identifier_type_id");

                    b.ToTable("business_identifiers", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint")
                        .HasColumnName("business_id");

                    b.Property<byte>("BusinessLinkTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("business_link_type_id");

                    b.Property<string>("Url")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_business_links");

                    b.HasIndex("BusinessId")
                        .HasDatabaseName("ix_business_links_business_id");

                    b.HasIndex("BusinessLinkTypeId")
                        .HasDatabaseName("ix_business_links_business_link_type_id");

                    b.ToTable("business_links", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessLinkType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("label");

                    b.Property<string>("OriginalLogoUrl")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("original_logo_url");

                    b.Property<string>("ResizedLogoUrl")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("resized_logo_url");

                    b.HasKey("Id")
                        .HasName("pk_business_link_types");

                    b.ToTable("business_link_types", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("address");

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint")
                        .HasColumnName("business_id");

                    b.Property<long?>("BusinessOwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("business_owner_id");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("email");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("employee_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("phone_number");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("photo_url");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_business_members");

                    b.HasIndex("BusinessId")
                        .HasDatabaseName("ix_business_members_business_id");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_business_members_city_id");

                    b.ToTable("business_members", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessOwner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BusinessMemberId")
                        .HasColumnType("bigint")
                        .HasColumnName("business_member_id");

                    b.Property<bool>("IsPrimaryOwner")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary_owner");

                    b.Property<float>("OwnerShipPercentage")
                        .HasColumnType("real")
                        .HasColumnName("owner_ship_percentage");

                    b.Property<DateOnly>("OwnerShipStartDate")
                        .HasColumnType("date")
                        .HasColumnName("owner_ship_start_date");

                    b.Property<long?>("UserAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_account_id");

                    b.HasKey("Id")
                        .HasName("pk_business_owners");

                    b.HasIndex("BusinessMemberId")
                        .IsUnique()
                        .HasDatabaseName("ix_business_owners_business_member_id");

                    b.ToTable("business_owners", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessRelationship", b =>
                {
                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_id");

                    b.Property<long>("RetailerId")
                        .HasColumnType("bigint")
                        .HasColumnName("retailer_id");

                    b.Property<int>("BusinessRelationshipType")
                        .HasColumnType("integer")
                        .HasColumnName("business_relationship_type");

                    b.HasKey("SupplierId", "RetailerId", "BusinessRelationshipType")
                        .HasName("pk_business_relationships");

                    b.HasIndex("RetailerId")
                        .HasDatabaseName("ix_business_relationships_retailer_id");

                    b.ToTable("business_relationships", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint")
                        .HasColumnName("business_id");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<byte>("RoleId")
                        .HasColumnType("smallint")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_business_roles");

                    b.HasIndex("BusinessId")
                        .HasDatabaseName("ix_business_roles_business_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_business_roles_role_id");

                    b.ToTable("business_roles", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessStatus", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_business_statuses");

                    b.ToTable("business_statuses", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_business_types");

                    b.ToTable("business_types", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte>("CountryId")
                        .HasColumnType("smallint")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_cities");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_cities_country_id");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.ContactType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_contact_types");

                    b.ToTable("contact_types", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.Country", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_countries");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.Currency", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_currencies");

                    b.ToTable("currencies", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BusinessMemberId")
                        .HasColumnType("bigint")
                        .HasColumnName("business_member_id");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("departure_date");

                    b.Property<DateTime>("HiringDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("hiring_date");

                    b.Property<long?>("UserAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_account_id");

                    b.HasKey("Id")
                        .HasName("pk_employees");

                    b.HasIndex("BusinessMemberId")
                        .IsUnique()
                        .HasDatabaseName("ix_employees_business_member_id");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.EmployeePosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_employee_positions");

                    b.ToTable("employee_positions", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.IdentifierType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_identifier_types");

                    b.ToTable("identifier_types", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.Industry", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_industries");

                    b.ToTable("industries", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.Language", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("name");

                    b.HasKey("Code")
                        .HasName("pk_languages");

                    b.ToTable("languages", (string)null);

                    b.HasData(
                        new
                        {
                            Code = "ar",
                            Name = "العربية"
                        },
                        new
                        {
                            Code = "fr",
                            Name = "Français"
                        },
                        new
                        {
                            Code = "en",
                            Name = "English"
                        });
                });

            modelBuilder.Entity("Nexium.API.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("PermissionType")
                        .HasColumnType("integer")
                        .HasColumnName("permission_type");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.ToTable("permissions", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.PersonIdentifier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("BusinessMemberId")
                        .HasColumnType("bigint")
                        .HasColumnName("business_member_id");

                    b.Property<string>("DocumentUrl")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("document_url");

                    b.Property<long?>("InternalPersonId")
                        .HasColumnType("bigint")
                        .HasColumnName("internal_person_id");

                    b.Property<byte>("PersonIdentifierTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("person_identifier_type_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_person_identifiers");

                    b.HasIndex("BusinessMemberId")
                        .HasDatabaseName("ix_person_identifiers_business_member_id");

                    b.HasIndex("PersonIdentifierTypeId")
                        .HasDatabaseName("ix_person_identifiers_person_identifier_type_id");

                    b.ToTable("person_identifiers", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.PersonIdentifierType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_person_identifier_types");

                    b.ToTable("person_identifier_types", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.Role", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.RolePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Allowed")
                        .HasColumnType("boolean")
                        .HasColumnName("allowed");

                    b.Property<int>("AppSectionId")
                        .HasColumnType("integer")
                        .HasColumnName("app_section_id");

                    b.Property<long>("BusinessRoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("business_role_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.HasKey("Id")
                        .HasName("pk_role_permissions");

                    b.HasIndex("AppSectionId")
                        .HasDatabaseName("ix_role_permissions_app_section_id");

                    b.HasIndex("BusinessRoleId")
                        .HasDatabaseName("ix_role_permissions_business_role_id");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_role_permissions_permission_id");

                    b.ToTable("role_permissions", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.Subscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("AutoRenewal")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_renewal");

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint")
                        .HasColumnName("business_id");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ends_at");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starts_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("SubscriptionPlanId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_plan_id");

                    b.HasKey("Id")
                        .HasName("pk_subscriptions");

                    b.HasIndex("BusinessId")
                        .HasDatabaseName("ix_subscriptions_business_id");

                    b.HasIndex("SubscriptionPlanId")
                        .HasDatabaseName("ix_subscriptions_subscription_plan_id");

                    b.ToTable("subscriptions", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.SubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("MonthlyPricePerUser")
                        .HasColumnType("numeric")
                        .HasColumnName("monthly_price_per_user");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("YearlyPricePerUser")
                        .HasColumnType("numeric")
                        .HasColumnName("yearly_price_per_user");

                    b.HasKey("Id")
                        .HasName("pk_subscription_plans");

                    b.ToTable("subscription_plans", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.TargetMarket", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_target_markets");

                    b.ToTable("target_markets", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.TranslationMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AttributeName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("attribute_name");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("entity_type_name");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("language_code");

                    b.Property<string>("TranslatedText")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("translated_text");

                    b.HasKey("Id")
                        .HasName("pk_translation_mappings");

                    b.HasIndex("LanguageCode")
                        .HasDatabaseName("ix_translation_mappings_language_code");

                    b.HasIndex("EntityId", "EntityTypeName", "AttributeName", "LanguageCode")
                        .IsUnique()
                        .HasDatabaseName("ix_translation_mappings_entity_id_entity_type_name_attribute_n");

                    b.ToTable("translation_mappings", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("AccountLockedUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("account_locked_until");

                    b.Property<string>("BackupEmail")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("backup_email");

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint")
                        .HasColumnName("business_id");

                    b.Property<long?>("BusinessOwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("business_owner_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("email");

                    b.Property<string>("EmailVerificationCode")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("email_verification_code");

                    b.Property<DateTime?>("EmailVerificationExpiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("email_verification_expiry");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("email_verified");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("employee_id");

                    b.Property<byte>("FailedLoginAttempts")
                        .HasColumnType("smallint")
                        .HasColumnName("failed_login_attempts");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("hashed_password");

                    b.Property<bool>("IsTwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_two_factor_enabled");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login");

                    b.Property<DateTime>("PasswordUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("password_updated_at");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_verified");

                    b.Property<string>("PhoneVerificationCode")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("phone_verification_code");

                    b.Property<DateTime?>("PhoneVerificationExpiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("phone_verification_expiry");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("profile_picture_url");

                    b.Property<int>("TwoFactorMethod")
                        .HasColumnType("integer")
                        .HasColumnName("two_factor_method");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_user_accounts");

                    b.HasIndex("BusinessId")
                        .HasDatabaseName("ix_user_accounts_business_id");

                    b.HasIndex("BusinessOwnerId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_accounts_business_owner_id");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_accounts_employee_id");

                    b.ToTable("user_accounts", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.UserAccountActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityTypeName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("entity_type_name");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("operation");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("operation_date");

                    b.Property<long>("UserAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_account_id");

                    b.HasKey("Id")
                        .HasName("pk_user_account_activities");

                    b.HasIndex("UserAccountId")
                        .HasDatabaseName("ix_user_account_activities_user_account_id");

                    b.ToTable("user_account_activities", (string)null);
                });

            modelBuilder.Entity("Nexium.API.Entities.UserAccountPermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Allowed")
                        .HasColumnType("boolean")
                        .HasColumnName("allowed");

                    b.Property<int>("AppSectionId")
                        .HasColumnType("integer")
                        .HasColumnName("app_section_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.Property<long>("UserAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_account_id");

                    b.HasKey("Id")
                        .HasName("pk_user_account_permissions");

                    b.HasIndex("AppSectionId")
                        .HasDatabaseName("ix_user_account_permissions_app_section_id");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_user_account_permissions_permission_id");

                    b.HasIndex("UserAccountId")
                        .HasDatabaseName("ix_user_account_permissions_user_account_id");

                    b.ToTable("user_account_permissions", (string)null);
                });

            modelBuilder.Entity("BusinessIndustry", b =>
                {
                    b.HasOne("Nexium.API.Entities.Business", null)
                        .WithMany()
                        .HasForeignKey("BusinessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_industry_businesses_businesses_id");

                    b.HasOne("Nexium.API.Entities.Industry", null)
                        .WithMany()
                        .HasForeignKey("IndustriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_industry_industries_industries_id");
                });

            modelBuilder.Entity("BusinessRoleUserAccount", b =>
                {
                    b.HasOne("Nexium.API.Entities.BusinessRole", null)
                        .WithMany()
                        .HasForeignKey("BusinessRolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_role_user_account_business_roles_business_roles_id");

                    b.HasOne("Nexium.API.Entities.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserAccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_role_user_account_user_accounts_user_accounts_id");
                });

            modelBuilder.Entity("BusinessTargetMarket", b =>
                {
                    b.HasOne("Nexium.API.Entities.Business", null)
                        .WithMany()
                        .HasForeignKey("BusinessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_target_market_businesses_businesses_id");

                    b.HasOne("Nexium.API.Entities.TargetMarket", null)
                        .WithMany()
                        .HasForeignKey("TargetMarketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_target_market_target_markets_target_markets_id");
                });

            modelBuilder.Entity("EmployeeEmployeePosition", b =>
                {
                    b.HasOne("Nexium.API.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_employee_position_employees_employees_id");

                    b.HasOne("Nexium.API.Entities.EmployeePosition", null)
                        .WithMany()
                        .HasForeignKey("PositionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_employee_employee_position_employee_positions_positions_id");
                });

            modelBuilder.Entity("Nexium.API.Entities.AppSection", b =>
                {
                    b.HasOne("Nexium.API.Entities.AppSection", "ParentAppSection")
                        .WithMany("ChildSections")
                        .HasForeignKey("ParentAppSectionId")
                        .HasConstraintName("fk_app_sections_app_sections_parent_app_section_id");

                    b.Navigation("ParentAppSection");
                });

            modelBuilder.Entity("Nexium.API.Entities.Business", b =>
                {
                    b.HasOne("Nexium.API.Entities.AddressType", null)
                        .WithMany("Businesses")
                        .HasForeignKey("AddressTypeId")
                        .HasConstraintName("fk_businesses_address_types_address_type_id");

                    b.HasOne("Nexium.API.Entities.BusinessType", "BusinessType")
                        .WithMany("Businesses")
                        .HasForeignKey("BusinessTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_businesses_business_types_business_type_id");

                    b.HasOne("Nexium.API.Entities.Currency", "Currency")
                        .WithMany("Businesses")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk_businesses_currencies_currency_id");

                    b.HasOne("Nexium.API.Entities.BusinessStatus", "CurrentStatus")
                        .WithMany("Businesses")
                        .HasForeignKey("CurrentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_businesses_business_statuses_current_status_id");

                    b.HasOne("Nexium.API.Entities.Language", "Language")
                        .WithMany("Businesses")
                        .HasForeignKey("LanguageCode")
                        .HasConstraintName("fk_businesses_languages_language_code");

                    b.Navigation("BusinessType");

                    b.Navigation("Currency");

                    b.Navigation("CurrentStatus");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessAddress", b =>
                {
                    b.HasOne("Nexium.API.Entities.AddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_addresses_address_types_address_type_id");

                    b.HasOne("Nexium.API.Entities.Business", "Business")
                        .WithMany("BusinessAddresses")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_addresses_businesses_business_id");

                    b.HasOne("Nexium.API.Entities.City", "City")
                        .WithMany("BusinessAddresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_addresses_cities_city_id");

                    b.Navigation("AddressType");

                    b.Navigation("Business");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessContact", b =>
                {
                    b.HasOne("Nexium.API.Entities.Business", "Business")
                        .WithMany("BusinessContacts")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_contacts_businesses_business_id");

                    b.HasOne("Nexium.API.Entities.ContactType", "ContactType")
                        .WithMany("BusinessContacts")
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_contacts_contact_types_contact_type_id");

                    b.HasOne("Nexium.API.Entities.EmployeePosition", "EmployeePosition")
                        .WithMany("BusinessContacts")
                        .HasForeignKey("EmployeePositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_contacts_employee_positions_employee_position_id");

                    b.Navigation("Business");

                    b.Navigation("ContactType");

                    b.Navigation("EmployeePosition");
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessIdentifier", b =>
                {
                    b.HasOne("Nexium.API.Entities.Business", "Business")
                        .WithMany("BusinessIdentifiers")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_identifiers_businesses_business_id");

                    b.HasOne("Nexium.API.Entities.IdentifierType", "IdentifierType")
                        .WithMany("BusinessIdentifiers")
                        .HasForeignKey("IdentifierTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_identifiers_identifier_types_identifier_type_id");

                    b.Navigation("Business");

                    b.Navigation("IdentifierType");
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessLink", b =>
                {
                    b.HasOne("Nexium.API.Entities.Business", "Business")
                        .WithMany("BusinessLinks")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_links_businesses_business_id");

                    b.HasOne("Nexium.API.Entities.BusinessLinkType", "BusinessLinkType")
                        .WithMany("BusinessLinks")
                        .HasForeignKey("BusinessLinkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_links_business_link_types_business_link_type_id");

                    b.Navigation("Business");

                    b.Navigation("BusinessLinkType");
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessMember", b =>
                {
                    b.HasOne("Nexium.API.Entities.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_members_businesses_business_id");

                    b.HasOne("Nexium.API.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .HasConstraintName("fk_business_members_cities_city_id");

                    b.Navigation("Business");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessOwner", b =>
                {
                    b.HasOne("Nexium.API.Entities.BusinessMember", "BusinessMember")
                        .WithOne("BusinessOwner")
                        .HasForeignKey("Nexium.API.Entities.BusinessOwner", "BusinessMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_business_owners_business_members_business_member_id");

                    b.Navigation("BusinessMember");
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessRelationship", b =>
                {
                    b.HasOne("Nexium.API.Entities.Business", "Retailer")
                        .WithMany("Suppliers")
                        .HasForeignKey("RetailerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_business_relationships_businesses_retailer_id");

                    b.HasOne("Nexium.API.Entities.Business", "Supplier")
                        .WithMany("Retailers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_business_relationships_businesses_supplier_id");

                    b.Navigation("Retailer");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessRole", b =>
                {
                    b.HasOne("Nexium.API.Entities.Business", "Business")
                        .WithMany("BusinessRoles")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_roles_businesses_business_id");

                    b.HasOne("Nexium.API.Entities.Role", "Role")
                        .WithMany("BusinessRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_roles_roles_role_id");

                    b.Navigation("Business");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Nexium.API.Entities.City", b =>
                {
                    b.HasOne("Nexium.API.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cities_countries_country_id");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Nexium.API.Entities.Employee", b =>
                {
                    b.HasOne("Nexium.API.Entities.BusinessMember", "BusinessMember")
                        .WithOne("Employee")
                        .HasForeignKey("Nexium.API.Entities.Employee", "BusinessMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_employees_business_members_business_member_id");

                    b.Navigation("BusinessMember");
                });

            modelBuilder.Entity("Nexium.API.Entities.PersonIdentifier", b =>
                {
                    b.HasOne("Nexium.API.Entities.BusinessMember", "BusinessMember")
                        .WithMany("PersonIdentifiers")
                        .HasForeignKey("BusinessMemberId")
                        .HasConstraintName("fk_person_identifiers_business_members_business_member_id");

                    b.HasOne("Nexium.API.Entities.PersonIdentifierType", "PersonIdentifierType")
                        .WithMany("PersonIdentifiers")
                        .HasForeignKey("PersonIdentifierTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_person_identifiers_person_identifier_types_person_identifie");

                    b.Navigation("BusinessMember");

                    b.Navigation("PersonIdentifierType");
                });

            modelBuilder.Entity("Nexium.API.Entities.RolePermission", b =>
                {
                    b.HasOne("Nexium.API.Entities.AppSection", "AppSection")
                        .WithMany("RolePermissions")
                        .HasForeignKey("AppSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_app_sections_app_section_id");

                    b.HasOne("Nexium.API.Entities.BusinessRole", "BusinessRole")
                        .WithMany("RolePermissions")
                        .HasForeignKey("BusinessRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_business_roles_business_role_id");

                    b.HasOne("Nexium.API.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_id");

                    b.Navigation("AppSection");

                    b.Navigation("BusinessRole");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Nexium.API.Entities.Subscription", b =>
                {
                    b.HasOne("Nexium.API.Entities.Business", "Business")
                        .WithMany("Subscriptions")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscriptions_businesses_business_id");

                    b.HasOne("Nexium.API.Entities.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscriptions_subscription_plans_subscription_plan_id");

                    b.Navigation("Business");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("Nexium.API.Entities.TranslationMapping", b =>
                {
                    b.HasOne("Nexium.API.Entities.Language", "Language")
                        .WithMany("TranslationMappings")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_translation_mappings_languages_language_code");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Nexium.API.Entities.UserAccount", b =>
                {
                    b.HasOne("Nexium.API.Entities.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_accounts_businesses_business_id");

                    b.HasOne("Nexium.API.Entities.BusinessOwner", "BusinessOwner")
                        .WithOne("UserAccount")
                        .HasForeignKey("Nexium.API.Entities.UserAccount", "BusinessOwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_user_accounts_business_owners_business_owner_id");

                    b.HasOne("Nexium.API.Entities.Employee", "Employee")
                        .WithOne("UserAccount")
                        .HasForeignKey("Nexium.API.Entities.UserAccount", "EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_user_accounts_employees_employee_id");

                    b.Navigation("Business");

                    b.Navigation("BusinessOwner");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Nexium.API.Entities.UserAccountActivity", b =>
                {
                    b.HasOne("Nexium.API.Entities.UserAccount", "UserAccount")
                        .WithMany("UserAccountActivities")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_account_activities_user_accounts_user_account_id");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Nexium.API.Entities.UserAccountPermission", b =>
                {
                    b.HasOne("Nexium.API.Entities.AppSection", "AppSection")
                        .WithMany("UserAccountPermissions")
                        .HasForeignKey("AppSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_account_permissions_app_sections_app_section_id");

                    b.HasOne("Nexium.API.Entities.Permission", "Permission")
                        .WithMany("UserAccountPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_account_permissions_permissions_permission_id");

                    b.HasOne("Nexium.API.Entities.UserAccount", "UserAccount")
                        .WithMany("UserAccountPermissions")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_account_permissions_user_accounts_user_account_id");

                    b.Navigation("AppSection");

                    b.Navigation("Permission");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Nexium.API.Entities.AddressType", b =>
                {
                    b.Navigation("Businesses");
                });

            modelBuilder.Entity("Nexium.API.Entities.AppSection", b =>
                {
                    b.Navigation("ChildSections");

                    b.Navigation("RolePermissions");

                    b.Navigation("UserAccountPermissions");
                });

            modelBuilder.Entity("Nexium.API.Entities.Business", b =>
                {
                    b.Navigation("BusinessAddresses");

                    b.Navigation("BusinessContacts");

                    b.Navigation("BusinessIdentifiers");

                    b.Navigation("BusinessLinks");

                    b.Navigation("BusinessRoles");

                    b.Navigation("Retailers");

                    b.Navigation("Subscriptions");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessLinkType", b =>
                {
                    b.Navigation("BusinessLinks");
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessMember", b =>
                {
                    b.Navigation("BusinessOwner");

                    b.Navigation("Employee");

                    b.Navigation("PersonIdentifiers");
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessOwner", b =>
                {
                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessRole", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessStatus", b =>
                {
                    b.Navigation("Businesses");
                });

            modelBuilder.Entity("Nexium.API.Entities.BusinessType", b =>
                {
                    b.Navigation("Businesses");
                });

            modelBuilder.Entity("Nexium.API.Entities.City", b =>
                {
                    b.Navigation("BusinessAddresses");
                });

            modelBuilder.Entity("Nexium.API.Entities.ContactType", b =>
                {
                    b.Navigation("BusinessContacts");
                });

            modelBuilder.Entity("Nexium.API.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Nexium.API.Entities.Currency", b =>
                {
                    b.Navigation("Businesses");
                });

            modelBuilder.Entity("Nexium.API.Entities.Employee", b =>
                {
                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Nexium.API.Entities.EmployeePosition", b =>
                {
                    b.Navigation("BusinessContacts");
                });

            modelBuilder.Entity("Nexium.API.Entities.IdentifierType", b =>
                {
                    b.Navigation("BusinessIdentifiers");
                });

            modelBuilder.Entity("Nexium.API.Entities.Language", b =>
                {
                    b.Navigation("Businesses");

                    b.Navigation("TranslationMappings");
                });

            modelBuilder.Entity("Nexium.API.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserAccountPermissions");
                });

            modelBuilder.Entity("Nexium.API.Entities.PersonIdentifierType", b =>
                {
                    b.Navigation("PersonIdentifiers");
                });

            modelBuilder.Entity("Nexium.API.Entities.Role", b =>
                {
                    b.Navigation("BusinessRoles");
                });

            modelBuilder.Entity("Nexium.API.Entities.SubscriptionPlan", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Nexium.API.Entities.UserAccount", b =>
                {
                    b.Navigation("UserAccountActivities");

                    b.Navigation("UserAccountPermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
